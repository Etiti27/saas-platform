name: Build & Deploy React Vite to EKS

on:
  push:
    branches: [cicd]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: SaaS-cluster-v3
  IMAGE_NAME: saas-frontend
  IMAGE_VERSION: v1.0.0 
  DOCKERHUB_USERNAME: obinna27
  NODE_COUNT: 2
  K8S_VERSION: 1.33
  NODE_TYPE: t3.small
  HELM_RELEASE_NAME: saas-helm
  CHART_NAME: bitnami/nginx
  CHART_VERSION: 15.5.2
  NAMESPACE: default

jobs:
  deploy:
    name: Deploy Frontend to EKS
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout Source Code
        uses: actions/checkout@v4

      - name: ⚙️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin


      - name: 🧪 Check if EKS cluster exists
        id: cluster-check
        run: |
          echo "Checking if EKS cluster '${{ env.CLUSTER_NAME }}' exists..."
          if aws eks describe-cluster --region "${{ env.AWS_REGION }}" --name "${{ env.CLUSTER_NAME }}" > /dev/null 2>&1; then
          echo "✅ Cluster exists. Skipping apply."
          echo "exists=true" >> $GITHUB_OUTPUT
          else
          echo "🚀 Cluster not found. Proceeding with apply."
          echo "exists=false" >> $GITHUB_OUTPUT
          fi



      - name: Create EKS cluster
        if: steps.cluster-check.outputs.exists == 'false'
        run: |
          eksctl create cluster \
            --name "${{ env.CLUSTER_NAME }}" \
            --version "${{ env.K8S_VERSION }}" \
            --region "${{ env.AWS_REGION }}" \
            --nodegroup-name "standard-workers" \
            --node-type "${{ env.NODE_TYPE }}" \
            --nodes "${{ env.NODE_COUNT }}" \
            --nodes-min 1 \
            --nodes-max 4 \
            --managed

      

      - name: eks update-kubeconfig
        run: aws eks --region "${{ env.AWS_REGION }}" update-kubeconfig --name "${{ env.CLUSTER_NAME }}"

      

      - name: 📦 Install Helm
        run: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: ➕ Add Helm Repositories
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo add jetstack https://charts.jetstack.io
          helm repo update

      - name: 🚀 Install NGINX Ingress Controller via Helm
        run: |
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx \
            --create-namespace \
            --set controller.publishService.enabled=true

      - name: 🔐 Install cert-manager via Helm
        run: |
          helm upgrade --install cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --version v1.15.0 \
            --set installCRDs=true

      - name: ⏳ Wait for cert-manager to be ready
        run: |
          kubectl rollout status deployment cert-manager -n cert-manager
          kubectl rollout status deployment cert-manager-webhook -n cert-manager
          kubectl rollout status deployment cert-manager-cainjector -n cert-manager

      - name: 📜 Apply ClusterIssuer and Ingress
        run: |
          kubectl apply -f ./k8s/clusterissuer.yaml
          kubectl apply -f ./k8s/frontend.yaml


